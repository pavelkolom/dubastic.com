// <auto-generated />
using System;
using AdsMaster.DB.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdsMaster.DB.Migrations
{
    [DbContext(typeof(AdsMasterContext))]
    partial class AdsMasterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.5.20278.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdsMaster.DB.Models.AwardCalculationQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("Id");

                    b.ToTable("pf_AwardCalculationQueue");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.AwardCondition", b =>
                {
                    b.Property<int>("AwardConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AwardDefinitionID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("EventCount")
                        .HasColumnType("int");

                    b.Property<string>("EventDefinitionID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("AwardConditionID");

                    b.HasIndex("AwardDefinitionID");

                    b.HasIndex("EventDefinitionID");

                    b.ToTable("pf_AwardCondition");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.AwardDefinition", b =>
                {
                    b.Property<string>("AwardDefinitionID")
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<bool>("IsSingleTimeAward")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("AwardDefinitionID");

                    b.ToTable("pf_AwardDefinition");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("CategoryID");

                    b.ToTable("pf_Category");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.EmailBanEntry", b =>
                {
                    b.Property<string>("EmailBan")
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("EmailBan");

                    b.ToTable("pf_EmailBan");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.EmailQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("Id");

                    b.ToTable("pf_EmailQueue");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.ErrorLogEntry", b =>
                {
                    b.Property<int>("ErrorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("Severity")
                        .HasColumnType("INT");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ErrorID");

                    b.ToTable("pf_ErrorLog");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.EventDefinition", b =>
                {
                    b.Property<string>("EventDefinitionID")
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsPublishedToFeed")
                        .HasColumnType("bit");

                    b.Property<int>("PointValue")
                        .HasColumnType("int");

                    b.HasKey("EventDefinitionID");

                    b.ToTable("pf_EventDefinition");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.ExternalUserAssociation", b =>
                {
                    b.Property<int>("ExternalUserAssociationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ExternalUserAssociationID");

                    b.HasIndex("UserID");

                    b.HasIndex("Issuer", "ProviderKey");

                    b.ToTable("pf_ExternalUserAssociation");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteId");

                    b.HasIndex("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("pf_Favorite");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.FeedEvent", b =>
                {
                    b.Property<int>("FeedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FeedID");

                    b.HasIndex("UserID");

                    b.ToTable("pf_Feed");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.Forum", b =>
                {
                    b.Property<int>("ForumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("ForumAdapterName")
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQAForum")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("LastPostName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<DateTime>("LastPostTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostCount")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("TopicCount")
                        .HasColumnType("int");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("ForumID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UrlName");

                    b.ToTable("pf_Forum");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.ForumPostRestriction", b =>
                {
                    b.Property<int>("ForumPostRestrictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("ForumPostRestrictionId");

                    b.HasIndex("ForumID");

                    b.HasIndex("Role");

                    b.ToTable("pf_ForumPostRestrictions");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.ForumRole", b =>
                {
                    b.Property<string>("Role")
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("Role");

                    b.ToTable("pf_Role");

                    b.HasData(
                        new
                        {
                            Role = "Admin"
                        },
                        new
                        {
                            Role = "Moderator"
                        });
                });

            modelBuilder.Entity("AdsMaster.DB.Models.ForumSetting", b =>
                {
                    b.Property<string>("Setting")
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(Max)");

                    b.HasKey("Setting");

                    b.ToTable("pf_Setting");

                    b.HasData(
                        new
                        {
                            Setting = "AllowImages",
                            Value = "False"
                        },
                        new
                        {
                            Setting = "CensorCharacter",
                            Value = "*"
                        },
                        new
                        {
                            Setting = "CensorWords",
                            Value = ""
                        },
                        new
                        {
                            Setting = "CloseAgedTopicsDays",
                            Value = "365"
                        },
                        new
                        {
                            Setting = "FacebookAppID",
                            Value = ""
                        },
                        new
                        {
                            Setting = "FacebookAppSecret",
                            Value = ""
                        },
                        new
                        {
                            Setting = "ForumTitle",
                            Value = ""
                        },
                        new
                        {
                            Setting = "GoogleClientId",
                            Value = ""
                        },
                        new
                        {
                            Setting = "GoogleClientSecret",
                            Value = ""
                        },
                        new
                        {
                            Setting = "IsClosingAgedTopics",
                            Value = "False"
                        },
                        new
                        {
                            Setting = "IsMailerEnabled",
                            Value = "True"
                        },
                        new
                        {
                            Setting = "IsNewUserApproved",
                            Value = "True"
                        },
                        new
                        {
                            Setting = "IsNewUserImageApproved",
                            Value = "False"
                        },
                        new
                        {
                            Setting = "IsPrivateForumInstance",
                            Value = "False"
                        },
                        new
                        {
                            Setting = "IsSearchIndexingEnabled",
                            Value = "True"
                        },
                        new
                        {
                            Setting = "LogErrors",
                            Value = "True"
                        },
                        new
                        {
                            Setting = "LogModeration",
                            Value = "True"
                        },
                        new
                        {
                            Setting = "LogSecurity",
                            Value = "True"
                        },
                        new
                        {
                            Setting = "MailerAddress",
                            Value = "example@gmail.com"
                        },
                        new
                        {
                            Setting = "MailerQuantity",
                            Value = "4"
                        },
                        new
                        {
                            Setting = "MailSendingInverval",
                            Value = "1500"
                        },
                        new
                        {
                            Setting = "MailSignature",
                            Value = ""
                        },
                        new
                        {
                            Setting = "MicrosoftClientID",
                            Value = ""
                        },
                        new
                        {
                            Setting = "MicrosoftClientSecret",
                            Value = ""
                        },
                        new
                        {
                            Setting = "MinimumSecondsBetweenPosts",
                            Value = "30"
                        },
                        new
                        {
                            Setting = "OAuth2ClientID",
                            Value = ""
                        },
                        new
                        {
                            Setting = "OAuth2ClientSecret",
                            Value = ""
                        },
                        new
                        {
                            Setting = "OAuth2DisplayName",
                            Value = ""
                        },
                        new
                        {
                            Setting = "OAuth2LoginUrl",
                            Value = ""
                        },
                        new
                        {
                            Setting = "OAuth2Scope",
                            Value = "email"
                        },
                        new
                        {
                            Setting = "OAuth2TokenUrl",
                            Value = ""
                        },
                        new
                        {
                            Setting = "PostsPerPage",
                            Value = "20"
                        },
                        new
                        {
                            Setting = "ScoringGameCalculatorInterval",
                            Value = "1000"
                        },
                        new
                        {
                            Setting = "SearchIndexingInterval",
                            Value = "10000"
                        },
                        new
                        {
                            Setting = "ServerDaylightSaving",
                            Value = "False"
                        },
                        new
                        {
                            Setting = "ServerTimeZone",
                            Value = "4"
                        },
                        new
                        {
                            Setting = "SessionLength",
                            Value = "20"
                        },
                        new
                        {
                            Setting = "SmtpPassword",
                            Value = "examplepassword"
                        },
                        new
                        {
                            Setting = "SmtpPort",
                            Value = "587"
                        },
                        new
                        {
                            Setting = "SmtpServer",
                            Value = "smtp.example.com"
                        },
                        new
                        {
                            Setting = "SmtpUser",
                            Value = "example@example.com"
                        },
                        new
                        {
                            Setting = "TermsOfService",
                            Value = ""
                        },
                        new
                        {
                            Setting = "TopicsPerPage",
                            Value = "20"
                        },
                        new
                        {
                            Setting = "UseEsmtp",
                            Value = "True"
                        },
                        new
                        {
                            Setting = "UseFacebookLogin",
                            Value = "False"
                        },
                        new
                        {
                            Setting = "UseGoogleLogin",
                            Value = "False"
                        },
                        new
                        {
                            Setting = "UseMicrosoftLogin",
                            Value = "False"
                        },
                        new
                        {
                            Setting = "UseOAuth2Login",
                            Value = "False"
                        },
                        new
                        {
                            Setting = "UserAvatarMaxHeight",
                            Value = "90"
                        },
                        new
                        {
                            Setting = "UserAvatarMaxkBytes",
                            Value = "10"
                        },
                        new
                        {
                            Setting = "UserAvatarMaxWidth",
                            Value = "90"
                        },
                        new
                        {
                            Setting = "UserImageMaxHeight",
                            Value = "300"
                        },
                        new
                        {
                            Setting = "UserImageMaxkBytes",
                            Value = "100"
                        },
                        new
                        {
                            Setting = "UserImageMaxWidth",
                            Value = "400"
                        },
                        new
                        {
                            Setting = "UseSslSmtp",
                            Value = "True"
                        },
                        new
                        {
                            Setting = "YouTubeHeight",
                            Value = "360"
                        },
                        new
                        {
                            Setting = "YouTubeWidth",
                            Value = "640"
                        });
                });

            modelBuilder.Entity("AdsMaster.DB.Models.ForumViewRestriction", b =>
                {
                    b.Property<int>("ForumViewRestrictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("ForumViewRestrictionId");

                    b.HasIndex("ForumID");

                    b.HasIndex("Role");

                    b.ToTable("pf_ForumViewRestrictions");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("ToUserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromUserID");

                    b.HasIndex("ToUserID");

                    b.ToTable("pf_Friend");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.IPBanEvent", b =>
                {
                    b.Property<string>("IPBan")
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("IPBan");

                    b.ToTable("pf_IPBan");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.JunkWordEntry", b =>
                {
                    b.Property<string>("JunkWord")
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("JunkWord");

                    b.ToTable("pf_JunkWords");

                    b.HasData(
                        new
                        {
                            JunkWord = "an"
                        },
                        new
                        {
                            JunkWord = "and"
                        },
                        new
                        {
                            JunkWord = "any"
                        },
                        new
                        {
                            JunkWord = "are"
                        },
                        new
                        {
                            JunkWord = "as"
                        },
                        new
                        {
                            JunkWord = "at"
                        },
                        new
                        {
                            JunkWord = "be"
                        },
                        new
                        {
                            JunkWord = "been"
                        },
                        new
                        {
                            JunkWord = "but"
                        },
                        new
                        {
                            JunkWord = "by"
                        },
                        new
                        {
                            JunkWord = "can"
                        },
                        new
                        {
                            JunkWord = "did"
                        },
                        new
                        {
                            JunkWord = "didn't"
                        },
                        new
                        {
                            JunkWord = "do"
                        },
                        new
                        {
                            JunkWord = "does"
                        },
                        new
                        {
                            JunkWord = "don't"
                        },
                        new
                        {
                            JunkWord = "for"
                        },
                        new
                        {
                            JunkWord = "from"
                        },
                        new
                        {
                            JunkWord = "gave"
                        },
                        new
                        {
                            JunkWord = "get"
                        },
                        new
                        {
                            JunkWord = "go"
                        },
                        new
                        {
                            JunkWord = "got"
                        },
                        new
                        {
                            JunkWord = "had"
                        },
                        new
                        {
                            JunkWord = "has"
                        },
                        new
                        {
                            JunkWord = "have"
                        },
                        new
                        {
                            JunkWord = "he"
                        },
                        new
                        {
                            JunkWord = "her"
                        },
                        new
                        {
                            JunkWord = "here"
                        },
                        new
                        {
                            JunkWord = "hers"
                        },
                        new
                        {
                            JunkWord = "his"
                        },
                        new
                        {
                            JunkWord = "i'd"
                        },
                        new
                        {
                            JunkWord = "if"
                        },
                        new
                        {
                            JunkWord = "in"
                        },
                        new
                        {
                            JunkWord = "is"
                        },
                        new
                        {
                            JunkWord = "it"
                        },
                        new
                        {
                            JunkWord = "its"
                        },
                        new
                        {
                            JunkWord = "it's"
                        },
                        new
                        {
                            JunkWord = "i've"
                        },
                        new
                        {
                            JunkWord = "let's"
                        },
                        new
                        {
                            JunkWord = "like"
                        },
                        new
                        {
                            JunkWord = "lot"
                        },
                        new
                        {
                            JunkWord = "me"
                        },
                        new
                        {
                            JunkWord = "my"
                        },
                        new
                        {
                            JunkWord = "no"
                        },
                        new
                        {
                            JunkWord = "not"
                        },
                        new
                        {
                            JunkWord = "of"
                        },
                        new
                        {
                            JunkWord = "or"
                        },
                        new
                        {
                            JunkWord = "our"
                        },
                        new
                        {
                            JunkWord = "out"
                        },
                        new
                        {
                            JunkWord = "say"
                        },
                        new
                        {
                            JunkWord = "says"
                        },
                        new
                        {
                            JunkWord = "she"
                        },
                        new
                        {
                            JunkWord = "so"
                        },
                        new
                        {
                            JunkWord = "some"
                        },
                        new
                        {
                            JunkWord = "such"
                        },
                        new
                        {
                            JunkWord = "than"
                        },
                        new
                        {
                            JunkWord = "that"
                        },
                        new
                        {
                            JunkWord = "that's"
                        },
                        new
                        {
                            JunkWord = "the"
                        },
                        new
                        {
                            JunkWord = "their"
                        },
                        new
                        {
                            JunkWord = "there"
                        },
                        new
                        {
                            JunkWord = "the've"
                        },
                        new
                        {
                            JunkWord = "they"
                        },
                        new
                        {
                            JunkWord = "this"
                        },
                        new
                        {
                            JunkWord = "those"
                        },
                        new
                        {
                            JunkWord = "to"
                        },
                        new
                        {
                            JunkWord = "us"
                        },
                        new
                        {
                            JunkWord = "very"
                        },
                        new
                        {
                            JunkWord = "was"
                        },
                        new
                        {
                            JunkWord = "was'nt"
                        },
                        new
                        {
                            JunkWord = "way"
                        },
                        new
                        {
                            JunkWord = "we"
                        },
                        new
                        {
                            JunkWord = "went"
                        },
                        new
                        {
                            JunkWord = "were"
                        },
                        new
                        {
                            JunkWord = "what"
                        },
                        new
                        {
                            JunkWord = "where"
                        },
                        new
                        {
                            JunkWord = "which"
                        },
                        new
                        {
                            JunkWord = "who"
                        },
                        new
                        {
                            JunkWord = "why"
                        },
                        new
                        {
                            JunkWord = "with"
                        },
                        new
                        {
                            JunkWord = "would"
                        },
                        new
                        {
                            JunkWord = "you"
                        },
                        new
                        {
                            JunkWord = "your"
                        });
                });

            modelBuilder.Entity("AdsMaster.DB.Models.LastForumView", b =>
                {
                    b.Property<int>("LastForumViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastForumViewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LastForumViewId");

                    b.HasIndex("ForumID");

                    b.HasIndex("UserID");

                    b.ToTable("pf_LastForumView");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.LastTopicView", b =>
                {
                    b.Property<int>("LastTopicViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastTopicViewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LastTopicViewId");

                    b.HasIndex("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("pf_LastTopicView");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.ModerationLogEntry", b =>
                {
                    b.Property<int>("ModerationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int?>("ForumID")
                        .HasColumnType("int");

                    b.Property<int>("ModerationType")
                        .HasColumnType("INT");

                    b.Property<string>("OldText")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int?>("PostID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("ModerationID");

                    b.HasIndex("PostID");

                    b.HasIndex("TopicID");

                    b.ToTable("pf_ModerationLog");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.PointLedger", b =>
                {
                    b.Property<int>("PointLedgerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventDefinitionID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PointLedgerID");

                    b.HasIndex("UserID");

                    b.ToTable("pf_PointLedger");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstInTopic")
                        .HasColumnType("bit");

                    b.Property<string>("LastEditName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("ParentPostID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ShowSig")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("PostID");

                    b.HasIndex("PostTime");

                    b.HasIndex("IP", "PostTime");

                    b.HasIndex("TopicID", "PostTime");

                    b.HasIndex("UserID", "IsDeleted");

                    b.ToTable("pf_Post");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.PostVote", b =>
                {
                    b.Property<int>("PostVoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PostVoteID");

                    b.HasIndex("PostID");

                    b.ToTable("pf_PostVote");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.PrivateMessage", b =>
                {
                    b.Property<int>("PMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastPostTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("UserNames")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("PMID");

                    b.ToTable("pf_PrivateMessage");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.PrivateMessagePost", b =>
                {
                    b.Property<int>("PMPostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullText")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("PMID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PMPostID");

                    b.HasIndex("PMID");

                    b.ToTable("pf_PrivateMessagePost");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.PrivateMessageUser", b =>
                {
                    b.Property<int>("PrivateMessageUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastViewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PMID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PrivateMessageUserId");

                    b.HasIndex("PMID");

                    b.HasIndex("UserID");

                    b.ToTable("pf_PrivateMessageUser");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.QueuedEmailMessage", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("QueueTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("ToEmail")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("ToName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("MessageID");

                    b.HasIndex("QueueTime");

                    b.ToTable("pf_QueuedEmailMessage");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.SearchQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("Id");

                    b.ToTable("pf_SearchQueue");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.SecurityLogEntry", b =>
                {
                    b.Property<int>("SecurityLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(40)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("SecurityLogType")
                        .HasColumnType("INT");

                    b.Property<int?>("TargetUserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SecurityLogID");

                    b.HasIndex("IP", "ActivityDate");

                    b.HasIndex("TargetUserID", "ActivityDate");

                    b.HasIndex("UserID", "ActivityDate");

                    b.ToTable("pf_SecurityLog");

                    b.HasData(
                        new
                        {
                            SecurityLogID = 1,
                            ActivityDate = new DateTime(2020, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified),
                            IP = "",
                            Message = "",
                            SecurityLogType = 6,
                            TargetUserID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("AdsMaster.DB.Models.ServiceHeartbeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastRun")
                        .HasColumnType("datetime2");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("Id");

                    b.ToTable("pf_ServiceHeartbeat");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.SubscribeTopic", b =>
                {
                    b.Property<int>("SubscribeTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsViewed")
                        .HasColumnType("bit");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SubscribeTopicId");

                    b.HasIndex("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("pf_SubscribeTopic");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerPostID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<string>("LastPostName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<DateTime>("LastPostTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastPostUserID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("int");

                    b.Property<string>("StartedByName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("StartedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("TopicID");

                    b.HasIndex("ForumID");

                    b.HasIndex("LastPostTime");

                    b.HasIndex("UrlName");

                    b.ToTable("pf_Topic");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.TopicSearchWord", b =>
                {
                    b.Property<int>("TopicSearchWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SearchWord")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("TopicSearchWordID");

                    b.HasIndex("TopicID");

                    b.HasIndex("SearchWord", "Rank");

                    b.ToTable("pf_TopicSearchWords");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.TopicViewLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TimeStamp");

                    b.ToTable("pf_TopicViewLog");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AuthorizationKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<Guid?>("Salt")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("pf_PopForumsUser");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            AuthorizationKey = new Guid("5f8462d6-7b5c-4226-99b9-2d0c749fd3b2"),
                            CreationDate = new DateTime(2020, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            IsApproved = true,
                            Name = "admin",
                            Password = "Sfs6ISr+llki1CIN1uszDNgd57zKB7QFd+jcIv9KkTA=",
                            Salt = new Guid("6baeb19b-cde3-40cd-b42c-dcc6211bb679")
                        });
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserActivity", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID");

                    b.ToTable("pf_UserActivity");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserAvatar", b =>
                {
                    b.Property<int>("UserAvatarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserAvatarID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("pf_UserAvatar");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserAward", b =>
                {
                    b.Property<int>("UserAwardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AwardDefinitionID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserAwardID");

                    b.HasIndex("AwardDefinitionID");

                    b.HasIndex("UserAwardID");

                    b.HasIndex("UserID");

                    b.ToTable("pf_UserAward");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserImage", b =>
                {
                    b.Property<int>("UserImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserImageID");

                    b.HasIndex("UserID");

                    b.ToTable("pf_UserImages");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("Role");

                    b.HasIndex("UserID");

                    b.ToTable("pf_PopForumsUserRole");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            Role = "Admin",
                            UserID = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            Role = "Moderator",
                            UserID = 1
                        });
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserSession", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SessionID");

                    b.HasIndex("UserID");

                    b.ToTable("pf_UserSession");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.AwardCondition", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.AwardDefinition", "AwardDefinition")
                        .WithMany("AwardConditions")
                        .HasForeignKey("AwardDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsMaster.DB.Models.EventDefinition", "EventDefinition")
                        .WithMany()
                        .HasForeignKey("EventDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.Favorite", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.Topic", "Topic")
                        .WithMany("Favorites")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsMaster.DB.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.Forum", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.Category", "Category")
                        .WithMany("Forums")
                        .HasForeignKey("CategoryID");
                });

            modelBuilder.Entity("AdsMaster.DB.Models.ForumPostRestriction", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.Forum", "Forum")
                        .WithMany("ForumPostRestrictions")
                        .HasForeignKey("ForumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsMaster.DB.Models.ForumRole", "ForumRole")
                        .WithMany("ForumPostRestrictions")
                        .HasForeignKey("Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.ForumViewRestriction", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.Forum", "Forum")
                        .WithMany("ForumViewRestrictions")
                        .HasForeignKey("ForumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsMaster.DB.Models.ForumRole", "ForumRole")
                        .WithMany("ForumViewRestrictions")
                        .HasForeignKey("Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.LastForumView", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.Forum", "Forum")
                        .WithMany("LastForumViews")
                        .HasForeignKey("ForumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsMaster.DB.Models.User", "User")
                        .WithMany("LastForumViews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.LastTopicView", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.Topic", "Topic")
                        .WithMany("LastTopicViews")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsMaster.DB.Models.User", "User")
                        .WithMany("LastTopicViews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.Post", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.PrivateMessagePost", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.PrivateMessage", "PrivateMessage")
                        .WithMany("PrivateMessagePosts")
                        .HasForeignKey("PMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.PrivateMessageUser", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.PrivateMessage", "PrivateMessage")
                        .WithMany("PrivateMessageUsers")
                        .HasForeignKey("PMID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsMaster.DB.Models.User", "User")
                        .WithMany("PrivateMessageUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.SubscribeTopic", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.Topic", "Topic")
                        .WithMany("SubscribeTopics")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsMaster.DB.Models.User", "User")
                        .WithMany("SubscribeTopics")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.Topic", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.Forum", "Forum")
                        .WithMany("Topics")
                        .HasForeignKey("ForumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.User", b =>
                {
                    b.OwnsOne("AdsMaster.DB.Models.Profile", "Profile", b1 =>
                        {
                            b1.Property<int>("UserID")
                                .HasColumnType("int");

                            b1.Property<int?>("AvatarID")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Dob")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Facebook")
                                .HasColumnType("NVARCHAR(256)");

                            b1.Property<bool>("HideVanity")
                                .HasColumnType("bit");

                            b1.Property<int?>("ImageID")
                                .HasColumnType("int");

                            b1.Property<string>("Instagram")
                                .HasColumnType("NVARCHAR(256)");

                            b1.Property<bool>("IsDaylightSaving")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsPlainText")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsSubscribed")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsTos")
                                .HasColumnType("bit");

                            b1.Property<int?>("LastPostID")
                                .HasColumnType("int");

                            b1.Property<string>("Location")
                                .IsRequired()
                                .HasColumnType("NVARCHAR(256)");

                            b1.Property<int>("Points")
                                .HasColumnType("int");

                            b1.Property<bool>("ShowDetails")
                                .HasColumnType("bit");

                            b1.Property<string>("Signature")
                                .IsRequired()
                                .HasColumnType("NVARCHAR(MAX)");

                            b1.Property<int>("TimeZone")
                                .HasColumnType("int");

                            b1.Property<string>("Twitter")
                                .HasColumnType("NVARCHAR(256)");

                            b1.Property<string>("Web")
                                .HasColumnType("NVARCHAR(256)");

                            b1.HasKey("UserID");

                            b1.ToTable("pf_Profile");

                            b1.WithOwner("User")
                                .HasForeignKey("UserID");

                            b1.HasData(
                                new
                                {
                                    UserID = 1,
                                    AvatarID = 0,
                                    Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    Facebook = "",
                                    HideVanity = false,
                                    ImageID = 0,
                                    Instagram = "",
                                    IsDaylightSaving = false,
                                    IsPlainText = false,
                                    IsSubscribed = true,
                                    IsTos = true,
                                    LastPostID = 0,
                                    Location = "",
                                    Points = 0,
                                    ShowDetails = true,
                                    Signature = "",
                                    TimeZone = 4,
                                    Twitter = "",
                                    Web = ""
                                });
                        });
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserActivity", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.User", "User")
                        .WithOne("UserActivity")
                        .HasForeignKey("AdsMaster.DB.Models.UserActivity", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserAvatar", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.User", "User")
                        .WithOne("UserAvatar")
                        .HasForeignKey("AdsMaster.DB.Models.UserAvatar", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserAward", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.AwardDefinition", "AwardDefinition")
                        .WithMany("UserAwards")
                        .HasForeignKey("AwardDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserImage", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.User", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsMaster.DB.Models.UserRole", b =>
                {
                    b.HasOne("AdsMaster.DB.Models.ForumRole", "ForumRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsMaster.DB.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
